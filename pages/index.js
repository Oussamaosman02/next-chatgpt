import Head from 'next/head'
import styles from '@/styles/Home.module.css'
import ReactMarkdown from 'react-markdown'
import { useEffect, useRef, useState } from 'react'
import Float from '@/components/float'
const random1 = Math.random() * 1000
const random2 = Math.random() * 1000
export default function Home () {
  const scrll = () => window.scrollTo({
    top: document.documentElement.scrollHeight,
    behavior: 'smooth'
  })
  const refPre = useRef()
  const refKey = useRef()
  const [key, setKey] = useState('')
  const [conversation, setConversation] = useState([{ role: 'system', content: 'Eres una inteligencia artificial.' }])
  const [esp, setEsp] = useState('')
  useEffect(() => {
    setKey(localStorage.getItem('key'))
  }, [key, setKey])
  async function handleSubmit (e) {
    e.preventDefault()
    const pregunta = refPre.current.value
    scrll()
    if (pregunta && key) {
      setEsp('Generando respuesta')
      const datoss = [...conversation, { role: 'user', content: pregunta }]
      setConversation(datoss)
      refPre.current.value = ''
      const res = await fetch('/api', {
        method: 'POST',
        headers: {
          'Content-type': 'application/json'
        },
        body: JSON.stringify({ datoss, key })
      })
      res.json().then((result) => {
        const resultado = result.result[0].message.content
        setConversation([...datoss, { role: 'assistant', content: resultado }])
      }
      )
      setEsp('')
      scrll()
    } else {
      alert('Introduce una pregunta')
    }
    scrll()
  }
  function handleKey (e) {
    e.preventDefault()
    const valorKey = refKey.current.value
    if (valorKey) {
      setKey(valorKey)
      localStorage.setItem('key', valorKey)
    } else {
      alert('introduce la api key')
    }
  }
  return (
    <>
      <Head>
        <title>CReal-GPT</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <main className={styles.main}>
        <Float />
        <form style={{ display: key ? 'flex' : 'none', gap: '10px', position: 'fixed', bottom: '10px', zIndex: '100' }} onSubmit={(e) => handleSubmit(e)}>
          <input style={{ padding: '10px', width: '85vw' }} placeholder='Mensaje' ref={refPre} />
          <button style={{ padding: '3px' }}>Enviar</button>
        </form>

        <ul className={styles.ul}>
          {
            conversation.length > 1
              ? (
                  conversation.map((rp, i) => {
                    let st
                    let random
                    let envelope
                    if (rp.role === 'user') {
                      st = styles.user
                      random = key ?? random1
                      envelope = (child) => child
                    } else if (rp.role === 'assistant') {
                      st = styles.ai
                      random = random2
                      envelope = (child) => {
                        return (
                          <ReactMarkdown>
                            {child}
                          </ReactMarkdown>
                        )
                      }
                    } else {
                      st = styles.sys
                      envelope = (child) => child
                    }
                    return (
                      <li
                        className={st}
                        style={{ '--url': `url('https://api.dicebear.com/5.x/adventurer/svg?seed=${random}')` }}
                        key={i}
                      >

                        {
                          envelope(rp.content)
                        }
                      </li>
                    )
                  })
                )
              : (
                <li className={styles.nada}>
                  <h2>Â¿QuÃ© necesitas?</h2>
                  <p>
                    Soy una IA muy sabia, una de las mÃ¡s capaces del mercado.
                  </p>
                  <h3>Esta IA puede:</h3>
                  <ul>
                    <li>Tener una variedad de aplicaciones, ya que interactuo con los usuarios en
                      tiempo real y ofrezco una experiencia de conversaciÃ³n mÃ¡s natural.
                    </li>
                    <li>Ser utilizada para proporcionar informaciÃ³n y asistencia en tiempo real a los estudiantes,
                      responder preguntas sobre cursos y asignaciones, y ofrecer recomendaciones personalizadas para el aprendizaje.
                    </li>
                    <li>Proporcionar soluciones a problemas tÃ©cnicos y asistir en la resoluciÃ³n de problemas de manera rÃ¡pida y eficiente.</li>
                  </ul>
                  <p>Â¿Necesitas reiniciar la conversaciÃ³n? Reinicia la pÃ¡gina ðŸ˜…</p>
                  <p>
                    Â¿Mis limitaciones? DescÃºbrelas por ti mismo ðŸ˜Ž
                  </p>
                  <form style={{ display: key ? 'none' : 'flex', gap: '10px', flexDirection: 'column', width: '75%', justifyContent: 'center', alignItems: 'center' }} onSubmit={(e) => handleKey(e)}>
                    <input style={{ padding: '10px', border: 'none', borderRadius: '10px', width: '75%' }} placeholder='api key de OpenAi' ref={refKey} />
                    <button style={{ width: 'fit-content', padding: '1px 20px', border: 'none', borderRadius: '10px', marginBottom: '5px' }}>
                      Empezar
                    </button>
                  </form>
                </li>
                )

          }
        </ul>
        <p className={styles.mess}>
          {esp}
        </p>
      </main>
    </>
  )
}
